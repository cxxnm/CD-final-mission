#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Authors: Leon Jung, [AuTURBO] Kihoon Kim (https://github.com/auturbo), Gilbert, Ashe Kim

import rospy, roslaunch
import subprocess
import os
import sys
from enum import Enum
from std_msgs.msg import UInt8, Float64
 
class CoreNodeController():
    def __init__(self):
        self.ros_package_path = os.path.dirname(os.path.realpath(__file__))
        self.ros_package_path = self.ros_package_path.replace('turtlebot3_autorace_core/nodes', '')

        # subscribes : status returned
        self.sub_mode_control = rospy.Subscriber('/core/decided_mode', UInt8, self.cbReceiveMode, queue_size=1)

        # subscrivers Stamps
        self.sub_construction_stamped = rospy.Subscriber('/detect/construction_stamped', UInt8, self.cbConstructionStamped, queue_size=1)
        self.sub_intersection_stamped = rospy.Subscriber('/detect/intersection_stamped', UInt8, self.cbIntersectionStamped, queue_size=1)
        self.sub_parking_stamped = rospy.Subscriber('/detect/parking_stamped', UInt8, self.cbParkingStamped, queue_size=1)

        # publishes orders:

        # CONSTRUCTION
        self.pub_construction_order = rospy.Publisher('/detect/construction_order', UInt8, queue_size=1)

        # INTERSECTION
        self.pub_intersection_order = rospy.Publisher('/detect/intersection_order', UInt8, queue_size=1)

        # PARKING
        self.pub_parking_order = rospy.Publisher('/detect/parking_order', UInt8, queue_size=1)   

        # MODE
        self.pub_mode_return = rospy.Publisher('/core/returned_mode', UInt8, queue_size=1)
        self.CurrentMode = Enum(
            'CurrentMode',
            (
                'idle',
                'construction',
                'intersection',
                'lane_following',
                'parking'
            )
        )
        self.current_mode = self.CurrentMode.idle.value
        
        # STEPS
        self.Step = Enum(
            'Step', 
            (
                'find_obstacle',
                'avoid_obstacle',
                'circling',
                'parking',
                'exit'
            )
        )

        self.current_step_construction = self.Step.find_obstacle.value
        self.current_step_intersection = self.Step.circling.value
        self.current_step_parking = self.Step.parking.value
        
        self.Launcher = Enum(
            'Launcher',
            (
                'launch_camera_ex_calib',
                'launch_detect_construction',
                'launch_detect_construction_sign',
                'launch_detect_intersection',
                'launch_detect_intersection_sign', 
                'launch_detect_parking',
                'launch_detect_parking_sign',
                'launch_detect_lane',
                'launch_control_lane',
                'launch_control_moving'
            )    
        )

        self.uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
        
        self.launch_camera_launched = False
        self.launch_detect_lane_launched = False
    
        self.launch_detect_construction_launched = False
        self.launch_detect_construction_sign_launched = False

        self.launch_detect_intersection_launched = False
        self.launch_detect_intersection_sign_launched = False

        self.launch_detect_parking_launched = False
        self.launch_detect_parking_sign_launched = False

        self.launch_control_lane_launched = False
        self.launch_control_moving_launched = False

        self.is_triggered = False
        self.is_started = True

        loop_rate = rospy.Rate(10) # 10hz
        while not rospy.is_shutdown():

            if self.is_started == True:
                self.current_mode = self.CurrentMode.lane_following.value
                self.fnControlNode()
                self.is_started = False

            if self.is_triggered == True:
                self.fnControlNode()
            
            loop_rate.sleep()

    def cbReceiveMode(self, mode_msg):
        rospy.loginfo("starts the progress with %d", mode_msg.data)
        
        self.current_mode = mode_msg.data
        self.is_triggered = True

    def cbConstructionStamped(self, construction_msg):
        rospy.loginfo("construction Step changed from %d", self.current_step_construction)
        self.current_step_construction = construction_msg.data

        if self.current_step_construction == self.Step.exit.value:
            self.current_mode = self.CurrentMode.lane_following.value
            msg_mode_return = UInt8()
            msg_mode_return.data = self.current_mode
            self.pub_mode_return.publish(msg_mode_return)
        
        self.is_triggered = True

    def cbIntersectionStamped(self, intersection_msg):
        rospy.loginfo("intersection Step changed from %d", self.current_step_intersection)
        self.current_step_intersection = intersection_msg.data

        if self.current_step_intersection == self.Step.exit.value:
            self.current_mode = self.CurrentMode.lane_following.value
            msg_mode_return = UInt8()
            msg_mode_return.data = self.current_mode
            self.pub_mode_return.publish(msg_mode_return)
        
        self.is_triggered = True
    
    def cbParkingStamped(self, parking_msg):
        rospy.loginfo("parking Step changed from %d", self.current_step_parking)
        self.current_step_parking = parking_msg.data

        if self.current_step_intersection == self.Step.exit.value:
            self.current_mode = self.CurrentMode.lane_following.value
            msg_mode_return = UInt8()
            msg_mode_return.data = self.current_mode
            self.pub_mode_return.publish(msg_mode_return)
        
        self.is_triggered = True

    def fnControlNode(self): 
        # start 

        rospy.loginfo(f"MODE: {self.current_mode}")
        # lane_following
        if self.current_mode == self.CurrentMode.lane_following.value:
            self.fnLaunch(self.Launcher.launch_camera_ex_calib.value, True)
            self.fnLaunch(self.Launcher.launch_detect_lane.value, True)

            self.fnLaunch(self.Launcher.launch_detect_intersection.value, True)
            self.fnLaunch(self.Launcher.launch_detect_intersection_sign.value, True)

            self.fnLaunch(self.Launcher.launch_detect_construction.value, True)
            self.fnLaunch(self.Launcher.launch_detect_construction_sign.value, True)

            self.fnLaunch(self.Launcher.launch_detect_parking.value, True)
            self.fnLaunch(self.Launcher.launch_detect_parking_sign.value, True)

            self.fnLaunch(self.Launcher.launch_control_lane.value, True)
            self.fnLaunch(self.Launcher.launch_control_moving.value, True)

        # intersection
        elif self.current_mode == self.CurrentMode.intersection.value:
            msg_pub_intersection_order = UInt8()
            if self.current_step_intersection == self.Step.circling.value:
                msg_pub_intersection_order.data = self.Step.circling.value

                self.fnLaunch(self.Launcher.launch_detect_lane.value, True)

                self.fnLaunch(self.Launcher.launch_detect_intersection_sign.value, True)
                self.fnLaunch(self.Launcher.launch_detect_intersection.value, True)

                self.fnLaunch(self.Launcher.launch_control_lane.value, True)
                self.fnLaunch(self.Launcher.launch_control_moving.value, True)

            elif self.current_step_intersection == self.Step.exit.value:
                msg_pub_intersection_order.data = self.Step.exit.value

                self.fnLaunch(self.Launcher.launch_detect_lane.value, True)

                self.fnLaunch(self.Launcher.launch_detect_intersection_sign.value, True)
                self.fnLaunch(self.Launcher.launch_detect_intersection.value, False)

                self.fnLaunch(self.Launcher.launch_control_lane.value, True)
                self.fnLaunch(self.Launcher.launch_control_moving.value, False)

            rospy.sleep(3)
            self.pub_intersection_order.publish(msg_pub_intersection_order)
        
        # parking
        elif self.current_mode == self.CurrentMode.parking.value:
            msg_pub_parking_order = UInt8()
            if self.current_step_parking == self.Step.parking.value:
                msg_pub_parking_order.data = self.Step.parking.value

                self.fnLaunch(self.Launcher.launch_camera_ex_calib.value, True)
                self.fnLaunch(self.Launcher.launch_detect_lane.value, True)

                self.fnLaunch(self.Launcher.launch_detect_parking_sign.value, False)
                self.fnLaunch(self.Launcher.launch_detect_parking.value, True)

                self.fnLaunch(self.Launcher.launch_control_lane.value, False)
                self.fnLaunch(self.Launcher.launch_control_moving.value, True)

            elif self.current_step_parking == self.Step.exit.value:
                msg_pub_parking_order.data = self.Step.exit.value

                self.fnLaunch(self.Launcher.launch_camera_ex_calib.value, True)
                self.fnLaunch(self.Launcher.launch_detect_parking.value, False)

                self.fnLaunch(self.Launcher.launch_detect_parking_sign.value, True)
                self.fnLaunch(self.Launcher.launch_detect_lane.value, True)

                self.fnLaunch(self.Launcher.launch_control_lane.value, True)
                self.fnLaunch(self.Launcher.launch_control_moving.value, False)

            rospy.sleep(3)
            self.pub_parking_order.publish(msg_pub_parking_order)

        # construction
        elif self.current_mode == self.CurrentMode.construction.value:
            msg_pub_construction_order = UInt8()
            if self.current_step_construction == self.Step.find_obstacle.value:
                msg_pub_construction_order.data = self.Step.find_obstacle.value

                self.fnLaunch(self.Launcher.launch_camera_ex_calib.value, True)
                self.fnLaunch(self.Launcher.launch_detect_lane.value, True)

                self.fnLaunch(self.Launcher.launch_detect_construction.value, True)
                self.fnLaunch(self.Launcher.launch_detect_construction_sign.value, False)

                self.fnLaunch(self.Launcher.launch_control_lane.value, True)
                self.fnLaunch(self.Launcher.launch_control_moving.value, False)

            elif self.current_step_construction == self.Step.avoid_obstacle.value:
                msg_pub_construction_order.data = self.Step.avoid_obstacle.value

                self.fnLaunch(self.Launcher.launch_camera_ex_calib.value, True)
                self.fnLaunch(self.Launcher.launch_detect_lane.value, True)

                self.fnLaunch(self.Launcher.launch_detect_construction.value, True)
                self.fnLaunch(self.Launcher.launch_detect_construction_sign.value, False)

                self.fnLaunch(self.Launcher.launch_control_lane.value, False)
                self.fnLaunch(self.Launcher.launch_control_moving.value, True)

            elif self.current_step_construction == self.Step.exit.value:
                msg_pub_construction_order.data = self.Step.exit.value

                self.fnLaunch(self.Launcher.launch_camera_ex_calib.value, True)
                self.fnLaunch(self.Launcher.launch_detect_lane.value, True)

                self.fnLaunch(self.Launcher.launch_detect_construction.value, False)
                self.fnLaunch(self.Launcher.launch_detect_construction_sign.value, True)

                self.fnLaunch(self.Launcher.launch_control_lane.value, True)
                self.fnLaunch(self.Launcher.launch_control_moving.value, False)

            rospy.sleep(2)
            self.pub_construction_order.publish(msg_pub_construction_order)

    def fnLaunch(self, launch_num, is_start):
        # NODE: extrinsic_camera
        if launch_num == self.Launcher.launch_camera_ex_calib.value:
            if is_start == True:
                if self.launch_camera_launched == False:
                    self.launch_camera = roslaunch.scriptapi.ROSLaunch()
                    self.launch_camera = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_camera/launch/extrinsic_camera_calibration.launch"])
                    self.launch_camera_launched = True
                    self.launch_camera.start()
                else:
                    pass
            else:
                if self.launch_camera_launched == True:
                    self.launch_camera_launched = False
                    self.launch_camera.shutdown()
                else:
                    pass

        # NODE: detect_lane
        elif launch_num == self.Launcher.launch_detect_lane.value:
            if is_start == True:
                if self.launch_detect_lane_launched == False:
                    self.launch_detect_lane = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detect_lane = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_detect/launch/detect_lane.launch"])
                    self.launch_detect_lane_launched = True
                    self.launch_detect_lane.start()
                else:
                    pass
            else:
                if self.launch_detect_lane_launched == True:
                    self.launch_detect_lane_launched = False
                    self.launch_detect_lane.shutdown()
                else:
                    pass

        # NODE: detect_intersection && detect_intersection_sign
        elif launch_num == self.Launcher.launch_detect_intersection.value:
            if is_start == True:
                if self.launch_detect_intersection_launched == False:
                    self.launch_detect_intersection = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detect_intersection = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_detect/launch/detect_intersection.launch"])
                    self.launch_detect_intersection_launched = True
                    self.launch_detect_intersection.start()
                else:
                    pass
            else:
                if self.launch_detect_intersection_launched == True:
                    self.launch_detect_intersection_launched = False
                    self.launch_detect_intersection.shutdown()
                pass
        elif launch_num == self.Launcher.launch_detect_intersection_sign.value:
            if is_start == True:
                if self.launch_detect_intersection_sign_launched == False:
                    self.launch_detect_intersection_sign = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detect_intersection_sign = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_detect/launch/detect_intersection_sign.launch"])
                    self.launch_detect_intersection_sign_launched = True
                    self.launch_detect_intersection_sign.start()
                else:
                    pass
            else:
                if self.launch_detect_intersection_sign_launched == True:
                    self.launch_detect_intersection_sign_launched = False
                    self.launch_detect_intersection_sign.shutdown()
                else:
                    pass
        
        # NODE: detect_parking && detect_parking_sign
        elif launch_num == self.Launcher.launch_detect_parking.value:
            if is_start == True:
                if self.launch_detect_parking_launched == False:
                    self.launch_detect_parking = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detect_parking = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_detect/launch/detect_parking.launch"])
                    self.launch_detect_parking_launched = True
                    self.launch_detect_parking.start()
                else:
                    pass
            else:
                if self.launch_detect_parking_launched == True:
                    self.launch_detect_parking_launched = False
                    self.launch_detect_parking.shutdown()
                else:
                    pass 
        elif launch_num == self.Launcher.launch_detect_parking_sign.value:
            if is_start == True:
                if self.launch_detect_parking_sign_launched == False:
                    self.launch_detect_parking_sign = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detect_parking_sign = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_detect/launch/detect_parking_sign.launch"])
                    self.launch_detect_parking_sign_launched = True
                    self.launch_detect_parking_sign.start()
                else:
                    pass
            else:
                if self.launch_detect_parking_sign_launched == True:
                    self.launch_detect_parking_sign_launched = False
                    self.launch_detect_parking_sign.shutdown()
                else:
                    pass                              
        
        # NODE: detect_construction && detect_construction_sign
        elif launch_num == self.Launcher.launch_detect_construction.value:
            if is_start == True:
                if self.launch_detect_construction_launched == False:
                    self.launch_detect_construction = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detect_construction = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_detect/launch/detect_construction.launch"])
                    self.launch_detect_construction_launched = True
                    self.launch_detect_construction.start()
                else:
                    pass
            else:
                if self.launch_detect_construction_launched == True:
                    self.launch_detect_construction_launched = False
                    self.launch_detect_construction.shutdown()
                pass
        elif launch_num == self.Launcher.launch_detect_construction_sign.value:
            if is_start == True:
                if self.launch_detect_construction_sign_launched == False:
                    self.launch_detect_construction_sign = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detect_construction_sign = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_detect/launch/detect_construction_sign.launch"])
                    self.launch_detect_construction_sign_launched = True
                    self.launch_detect_construction_sign.start()
                else:
                    pass
            else:
                if self.launch_detect_construction_sign_launched == True:
                    self.launch_detect_construction_sign_launched = False
                    self.launch_detect_construction_sign.shutdown()
                else:
                    pass    

        # NODE: control_lane && control_moving
        elif launch_num == self.Launcher.launch_control_lane.value:
            if is_start == True:
                if self.launch_control_lane_launched == False:
                    self.launch_control_lane = roslaunch.scriptapi.ROSLaunch()
                    self.launch_control_lane = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_driving/launch/turtlebot3_autorace_control_lane.launch"])
                    self.launch_control_lane_launched = True
                    self.launch_control_lane.start()
                else:
                    pass
            else:
                if self.launch_control_lane_launched == True:
                    self.launch_control_lane_launched = False
                    self.launch_control_lane.shutdown()
                else:
                    pass                  
        elif launch_num == self.Launcher.launch_control_moving.value:
            if is_start == True:
                if self.launch_control_moving_launched == False:
                    self.launch_control_moving = roslaunch.scriptapi.ROSLaunch()
                    self.launch_control_moving = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_driving/launch/turtlebot3_autorace_control_moving.launch"])
                    self.launch_control_moving_launched = True
                    self.launch_control_moving.start()
                else:
                    pass
            else:
                if self.launch_control_moving_launched == True:
                    self.launch_control_moving_launched = False
                    self.launch_control_moving.shutdown()
                pass

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('core_node_controller')
    node = CoreNodeController()
    node.main()
