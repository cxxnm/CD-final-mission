#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert, Ashe Kim
 
import rospy
from enum import Enum
from std_msgs.msg import UInt8, Float64
from sensor_msgs.msg import LaserScan
from turtlebot3_autorace_msgs.msg import MovingParam

class DetectParking():
    def __init__(self):
        # subscribes state 
        self.sub_parking_order = rospy.Subscriber('/detect/parking_order', UInt8, self.cbParkingOrder, queue_size=1)
        self.sub_moving_completed = rospy.Subscriber('/control/moving/complete', UInt8, self.cbMovingComplete, queue_size = 1)
        
        # publishes state
        self.pub_parking_return = rospy.Publisher('/detect/parking_stamped', UInt8, queue_size=1)
        self.pub_moving = rospy.Publisher('/control/moving/state', MovingParam, queue_size= 1)
        self.pub_max_vel = rospy.Publisher('/control/max_vel', Float64, queue_size = 1)

        self.StepOfParking = Enum('StepOfParking', 'parking exit')
        self.is_moving_complete = False

    def cbMovingComplete(self, data):
        self.is_moving_complete = True

    def cbParkingOrder(self, order):
        msg_pub_parking_return = UInt8()
        rospy.loginfo("[o]: PARKING ORDER")
        if order.data == self.StepOfParking.parking.value:                              
            rospy.loginfo("Now motion")
            msg_pub_max_vel = Float64()
            msg_pub_max_vel.data = 0.00
            self.pub_max_vel.publish(msg_pub_max_vel)

            rospy.sleep(1)

            # Go forward
            rospy.loginfo("go straight")
            msg_moving = MovingParam()
            msg_moving.moving_type = 4
            msg_moving.moving_value_angular = 0.0
            msg_moving.moving_value_linear = 0.35
            self.pub_moving.publish(msg_moving)
            while not self.is_moving_complete:
                rospy.sleep(0.1)
            self.is_moving_complete = False

            rospy.sleep(1)

            # Turn 180 degrees
            rospy.loginfo("turn 180 degrees")
            msg_moving.moving_type = 4
            msg_moving.moving_value_angular = 3.14  # 180 degrees in radians
            msg_moving.moving_value_linear = 0.0
            self.pub_moving.publish(msg_moving)
            while not self.is_moving_complete:
                rospy.sleep(0.1)
            self.is_moving_complete = False

            rospy.sleep(1)

            rospy.loginfo("parking finished")
            msg_pub_parking_return.data = self.StepOfParking.exit.value

        elif order.data == self.StepOfParking.exit.value:            
            rospy.loginfo("parking finished")
            msg_pub_parking_return.data = self.StepOfParking.exit.value

        self.pub_parking_return.publish(msg_pub_parking_return)
        rospy.sleep(3)

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('detect_parking')
    node = DetectParking()
    node.main()
