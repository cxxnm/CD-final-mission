import rospy
from enum import Enum
from std_msgs.msg import UInt8


class CoreModeDecider:
    def __init__(self):
        # subscribes
        self.sub_traffic_sign = rospy.Subscriber(
            "/detect/traffic_sign",
            UInt8,
            self.cbInvokedByTrafficSign,
            queue_size=1,
        )
        self.sub_returned_mode = rospy.Subscriber(
            "/core/returned_mode", UInt8, self.cbReturnedMode, queue_size=1
        )

        # publishes
        self.pub_decided_mode = rospy.Publisher(
            "/core/decided_mode", UInt8, queue_size=1
        )

        self.InvokedObject = Enum("InvokedObject", "traffic_sign")
        self.TrafficSign = Enum(
            "TrafficSign", 
            (
                "circle",
                "left",
                "parking",
                "construction",
                "stop"
            )
        )
        self.CurrentMode = Enum('CurrentMode', ['idle', 'start', 'construction', 'intersection', 'lane_following', 'parking', 'stopping', 'left'])

        self.fnInitMode()

    # Invoke if traffic sign is detected
    def cbInvokedByTrafficSign(self, traffic_sign_type_msg):
        rospy.loginfo("Traffic sign detected: %d", traffic_sign_type_msg.data)
        self.fnDecideMode(self.InvokedObject.traffic_sign.value, traffic_sign_type_msg)
    
    def cbReturnedMode(self, mode):
        rospy.loginfo("Mode returned to initial state")
        self.fnInitMode()

    def fnInitMode(self):
        self.current_mode = self.CurrentMode.lane_following.value
        self.fnPublishMode()

    def fnDecideMode(self, invoked_object, msg_data):
        if self.current_mode == self.CurrentMode.lane_following.value:
            rospy.loginfo("Current mode: lane_following")
            if invoked_object == self.InvokedObject.traffic_sign.value:
                rospy.loginfo("Traffic sign detected")
                if msg_data.data == self.TrafficSign.circle.value:
                    self.current_mode = self.CurrentMode.intersection.value 
                    rospy.loginfo("Detected sign: circle")
                elif msg_data.data == self.TrafficSign.left.value:
                    self.current_mode = self.CurrentMode.left.value 
                    rospy.loginfo("Detected sign: left")
                elif msg_data.data == self.TrafficSign.parking.value:
                    self.current_mode = self.CurrentMode.parking.value 
                    rospy.loginfo("Detected sign: parking")
                elif msg_data.data == self.TrafficSign.construction.value:
                    self.current_mode = self.CurrentMode.construction.value 
                    rospy.loginfo("Detected sign: construction")
                elif msg_data.data == self.TrafficSign.stop.value:
                    self.current_mode = self.CurrentMode.stopping.value 
                    rospy.loginfo("Detected sign: stop")

            self.fnPublishMode()

    def fnPublishMode(self):
        decided_mode = UInt8()
        decided_mode.data = self.current_mode
        self.pub_decided_mode.publish(decided_mode)

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('core_mode_decider')
    node = CoreModeDecider()
    node.main()
