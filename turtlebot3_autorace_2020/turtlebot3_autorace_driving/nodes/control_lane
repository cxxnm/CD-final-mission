import rospy
from std_msgs.msg import Float64
from geometry_msgs.msg import Twist


class ControlLane:
    def __init__(self):
        self.sub_lane = rospy.Subscriber(
            "/control/lane", Float64, self.cbFollowLane, queue_size=1
        )
        self.sub_max_vel = rospy.Subscriber(
            "/control/max_vel", Float64, self.cbGetMaxVel, queue_size=1
        )
        self.pub_cmd_vel = rospy.Publisher(
            "/control/cmd_vel", Twist, queue_size=1
        )

        self.lastError = 0
        self.MAX_VEL = 0.5 * 0.7  # Reduced by 30%

        rospy.on_shutdown(self.fnShutDown)

    def cbGetMaxVel(self, max_vel_msg):
        self.MAX_VEL = max_vel_msg.data * 0.7  # Reduced by 30%

    def cbFollowLane(self, desired_center):
        center = desired_center.data

        error = center - 500

        Kp = 0.007 * 0.7  # Reduced by 30%
        Kd = 0.015 * 0.7  # Reduced by 30%

        angular_z = Kp * error + Kd * (error - self.lastError)
        self.lastError = error

        twist = Twist()
        # Calculate linear velocity with a reduced base speed and smoother scaling
        base_speed = 0.1 * 0.7  # Reduced by 30%
        try:
            twist.linear.x = min(
                self.MAX_VEL * ((1 - abs(error) / 500) ** 2.5) + base_speed, self.MAX_VEL
            )
        except:
            twist.linear.x = base_speed
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = (
            -max(angular_z, -0.3) if angular_z < 0 else -min(angular_z, 0.3)
        )
        self.pub_cmd_vel.publish(twist)

    def fnShutDown(self):
        rospy.loginfo("Shutting down. cmd_vel will be 0")

        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('control_lane')
    node = ControlLane()
    node.main()
